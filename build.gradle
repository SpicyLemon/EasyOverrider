plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    // Publishing
    id 'com.jfrog.bintray' version '1.8.0'
    id 'maven-publish'
    // Versioning
    id 'org.ajoberstar.reckon' version '0.11.0'
}

import org.gradle.internal.logging.text.StyledTextOutputFactory
import static org.gradle.internal.logging.text.StyledTextOutput.Style

description = 'An easier way to override equals, hashCode, and toString in Java objects.'

repositories {
    // Use jcenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

compileJava {
    options.compilerArgs += ['-Xdiags:verbose', '-Xlint:unchecked']
}

reckon {
    scopeFromProp()
    if (!project.hasProperty("reckon.scope")) {
        project.ext.set('reckon.scope', 'patch')
    }
    snapshotFromProp()
    //sample usage: ./gradlew reckonTagCreate -Preckon.stage=final
    //          or: ./gradlew reckonTagCreate -Preckon.stage=final -Preckon.scope=minor
}

// Enhance the output for unit test failures
tasks.withType(Test) { 
  testLogging {
    exceptionFormat 'full'
    events 'failed'
    showStandardStreams true
  }
}

test {
    // Do a cleanTest first so that test always run when asked for
    dependsOn 'cleanTest'
    
    // Set some coloring stuff up
    System.setProperty('org.gradle.color.failure', 'RED')
    System.setProperty('org.gradle.color.progressstatus', 'YELLOW')
    System.setProperty('org.gradle.color.success', 'GREEN')
    def out = services.get(StyledTextOutputFactory).create('colored-test-output')
    out.style(Style.Normal)

    // Print the Test Suite name before running its tests.
    beforeSuite { suite ->
        if (suite.name.startsWith('Test Run') || suite.name.startsWith('Gradle Worker')) return
        out.println("\n" + suite.name)
    }
    // For each test, output using the appropriate color include the test name and the result.
    afterTest { descriptor, result ->
        def style
        if (result.failedTestCount > 0) style = Style.Failure
        else if (result.skippedTestCount > 0) style = Style.ProgressStatus
        else style = Style.Success
        out.text('  ').withStyle(style).println((style == Style.Success ? '    PASSED  '
                                                : style == Style.ProgressStatus ? '  SKIPPED  '
                                                : 'FAILED  ') + descriptor.name)
    }
    // When all done, output a summary.
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            out.println("Results: ${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
        }
    }
}

// Change the destination directory for javadocs so that gitlab can automatically publish them.
// Also provide links ot the main java stuff which also makes the javadoc use the simple names for them.
tasks.withType(Javadoc) {
    destinationDir = file("$rootDir/docs/")
    options {
        links('https://docs.oracle.com/javase/8/docs/api')
    }
}

// Create a sources jar when we build
task sourcesJar(type: Jar) {
    group = JavaBasePlugin.BUILD_TASK_NAME
    description = 'Assembles a jar archive containing the source.'
    dependsOn 'classes'
    archiveClassifier = 'source'
    doLast {
        from sourceSets.main.allJava
    }
}

// Create a javadoc jar when we build
task javadocJar(type: Jar) {
    group = JavaBasePlugin.BUILD_TASK_NAME
    description = 'Assembles a jar archive containing the javadoc.'
    dependsOn 'javadoc'
    archiveClassifier = 'javadoc'
    doLast {
        from javadoc.destinationDir
    }
}

def pomConfig = {
    licenses {
        license {
            name 'MIT'
            url 'https://github.com/SpicyLemon/EasyOverrider/blob/master/LICENSE'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id 'spicylemon'
            name 'Daniel Wedul'
            email 'easyoverrider@wedul.com'
        }
    }
    scm {
        url 'https://github.com/SpicyLemon/EasyOverrider'
    }
}

// Add the sources and javadoc jars as artifacts to publish
project.afterEvaluate {
    publishing {
        publications {
            bintrayPublication(MavenPublication) {
                from components.java
                artifactId 'easyOverrier'
                groupId 'spicylemon'
                artifact sourcesJar
                artifact javadocJar
                version "$project.version"
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', description)
                    root.appendNode('name', 'easyOverrider')
                    root.appendNode('url', 'https://github.com/SpicyLemon/EasyOverrider')
                    root.children().last() + pomConfig
                }
            }
        }
    }
}

bintray {
    user = resolveProperty('BINTRAY_USER', 'bintray.user')
    key = resolveProperty('BINTRAY_KEY', 'bintray.key')
    publications = ['bintrayPublication']
    publish = true

    pkg {
        repo = 'maven'
        name = 'easyOverrider'
        userOrg = resolveProperty('BINTRAY_ORG', 'bintray.org')
        desc = description
        websiteUrl = 'https://github.com/SpicyLemon/EasyOverrider'
        issueTrackerUrl = 'https://github.com/SpicyLemon/EasyOverrider/issues'
        vcsUrl = 'https://github.com/SpicyLemon/EasyOverrider'
        licenses = ['MIT']
        labels = ['equals', 'hashCode', 'toString', 'override']
        publicDownloadNumbers = true
        githubRepo = 'SpicyLemon/EasyOverrider'
        version {
            name = "$project.version"
            released  = new Date()
            vcsTag = "v$project.version"
            gpg {
                sign = true
                passphrase = resolveProperty('GPG_PASSPHRASE', 'gpg.passphrase')
            }
            //mavenCentralSync {
            //    sync = true
            //    user = resolveProperty('MAVEN_USER', 'maven.user')
            //    password = resolveProperty('MAVEN_PASSWORD', 'maven.password')
            //    close = '1'
            //}
        }
    }
}

String resolveProperty(String envVarKey, String projectPropKey) {
    String propValue = System.getenv()[envVarKey]
    propValue ?: findProperty(projectPropKey)
}
